{"version":3,"sources":["Sidebar.js","Projection.js","About.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","this","props","setSidebarCanvas","side_canvas","handleSelectAlgorithm","bind","e","v","target","value","selectAlgorithm","_this","_this$props","sidebar_orientation","sidebar_image_size","grem","p","hover_index","city_names","beta5VAE_labels","beta250VAE_labels","beta1VAE_labels","jointVAE_labels","labeling_keys","color_array","algorithm_options","algorithm_choice","react_default","a","createElement","style","display","flexDirection","justifyContent","flexGrow","padding","alignItems","color","onChange","map","option","index","key","ref","width","height","background","concat","join","transition","onClick","toggleAbout","Component","mnist_tile_locations","Object","toConsumableArray","Array","n","i","process","mnist_images","src","img","document","Projection","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","position","z","d3_x","x","d3_y","y","resize_transform","d3","translate","scale","view","mount","d3_zoom","transform","state","init","assertThisInitialized","addPoints","setUpCamera","animate","getZFromScale","changeEmbeddings","prev_choice","new_choice","_this2","console","log","ranges","start","sprite_side","end","sprite_number","push","embedding_chunks","range","algorithm_embedding_keys","slice","label_chunks","_loop","c","echunk","lchunk","item","points","scene","children","numVertices","length","geometry","attributes","array","Float32Array","new_colors","l","tween_pos","TWEEN","to","easing","Linear","None","onUpdate","THREE","needsUpdate","rvFOV","degToRad","fov","Math","tan","camera_z_position","fov_height","d3_transform","k","set","new_size","input","scale1","domain","clamp","zoomScaler","point_group","material","uniforms","size","camera_z_start","beta5_embeddings","vFOV","xs","min_x","_","max_x","ys","min_y","max_y","max_x_from_center","m","abs","max_y_from_center","far","max","scaleExtent","on","zoomHandler","initial_scale","initial_transform","_this$props2","loader","textures","t","load","flipY","magFilter","vertices","embedding","vert","positions","offsets","colors","addAttribute","floor","texture","repeat","vertexShader","fragmentShader","blending","NormalBlending","transparent","fog","lights","depthWrite","depthTest","point_cloud","userData","sprite_index","add","hover_container","point","frustumCulled","visible","digit_index","full_index","_this$props3","copyVector3sArray","offset","highlight_container","highlights","remove","apply","mouse_position","_this$props4","sidebar_ctx","mouse_vector","_ref","_ref2","slicedToArray","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","object","setHoverIndex","highlightPoint","fillRect","drawImage","_this3","domElement","_d3$mouse","node","_d3$mouse2","checkIntersects","_this$props5","setClearColor","appendChild","addBlankHighlightPoints","handleMouse","requestAnimationFrame","render","prevProps","_this$props6","removeChild","_this4","_this$props7","overflow","About","left","top","right","bottom","paddingTop","overflowY","fontSize","lineHeight","className","textAlign","cursor","textDecoration","maxWidth","margin","dist_default","about_text","tb","lr","Layout","ww","wh","sidebar_height","show_about","checkHash","indexOf","setState","window","innerWidth","innerHeight","sidebar_mount","offsetHeight","imageSmoothingEnabled","canvas","ctx","getContext","history","pushState","location","pathname","hash","addEventListener","removeEventListener","beta250_embeddings","beta1_embeddings","joint_embeddings","_this$state","sidebar_style","borderWidth","borderStyle","borderColor","main_style","font_size","objectSpread","scaler","general_style","src_Sidebar","src_Projection","src_About","Data","embeddings","fetch","then","response","json","scaled_embeddings","scaleEmbeddings","src_Layout","assign","App","src_Data","Boolean","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b04a8f9f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Sidebar extends Component {\r\n  componentDidMount() {\r\n    this.props.setSidebarCanvas(this.side_canvas)\r\n    this.handleSelectAlgorithm = this.handleSelectAlgorithm.bind(this)\r\n  }\r\n\r\n  handleSelectAlgorithm(e) {\r\n    let v = e.target.value\r\n    this.props.selectAlgorithm(v)\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      sidebar_orientation,\r\n      sidebar_image_size,\r\n      grem,\r\n      p,\r\n      hover_index,\r\n      beta5VAE_labels,\r\n      beta250VAE_labels,\r\n      beta1VAE_labels,\r\n      jointVAE_labels,\r\n      labeling_keys,\r\n      city_names,\r\n      color_array,\r\n      algorithm_options,\r\n      algorithm_choice,\r\n    } = this.props\r\n      //console.log(city_names)\r\n      //console.log(mnist_labels[3381])\r\n      //console.log(this.props[this.props.labeling_keys[algorithm_choice]])\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          justifyContent: 'space-between',\r\n          flexGrow: 1\r\n        }}\r\n      >\r\n        <div>\r\n          {' '}\r\n          <div\r\n            style={{\r\n              padding: grem / 2,\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n              color:'#000',\r\n            }}\r\n          >\r\n            <div>Architecture:</div>\r\n            <select\r\n              onChange={this.handleSelectAlgorithm}\r\n              value={algorithm_options[algorithm_choice]}\r\n            >\r\n              {algorithm_options.map((option, index) => (\r\n                <option key={option} value={option}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection:\r\n                sidebar_orientation === 'horizontal' ? 'row' : 'column',\r\n            }}\r\n          >\r\n            <div>\r\n              <canvas\r\n                ref={side_canvas => {\r\n                  this.side_canvas = side_canvas\r\n                }}\r\n                width={sidebar_image_size}\r\n                height={sidebar_image_size}\r\n              />\r\n            </div>\r\n            <div style={{ flexGrow: 1 }}>\r\n              <div\r\n                style={{\r\n                  background: hover_index\r\n                    ? `rgb(${color_array[this.props[this.props.labeling_keys[algorithm_choice]][hover_index] + 1].join(',')})`\r\n                    : 'transparent',\r\n                  color: '#000',\r\n                  padding: p(grem / 4, grem / 2),\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  transition: 'all 0.1s linear',\r\n                }}\r\n              >\r\n                <div>Label:</div>\r\n                {hover_index ? <div>{this.props[this.props.labeling_keys[algorithm_choice]][hover_index]}</div> : null}\r\n              </div>\r\n              <div\r\n                style={{\r\n                    //\r\n                  color: '#000',\r\n                  padding: p(grem / 4, grem / 2),\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                }}\r\n              >\r\n                Name:\r\n                {hover_index ? <div>{city_names[hover_index]}</div> : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ padding: grem / 2 }}>\r\n          <div>\r\n            An interactive UMAP visualization of a dataset of urban forms, clustered based on VAE encodings.{' '}\r\n            <button\r\n              onClick={() => {\r\n                this.props.toggleAbout(true)\r\n              }}\r\n            >\r\n              About\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\nimport {NormalBlending} from 'three'\r\nimport * as _ from 'lodash'\r\nimport * as d3 from 'd3'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\n\r\n// Constants for sprite sheets\r\nlet sprite_side = 16\r\nlet sprite_size = sprite_side * sprite_side\r\nlet sprite_number = 58\r\nlet sprite_image_size = 128\r\n// actual sprite size needs to be power of 2\r\nlet sprite_actual_size = 2048\r\n\r\nlet mnist_tile_string = 'citydataset_tile_solid_'\r\nlet mnist_tile_locations = [...Array(sprite_number)].map(\r\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\r\n)\r\n\r\nlet mnist_images = mnist_tile_locations.map(src => {\r\n  let img = document.createElement('img')\r\n  img.src = src\r\n  return img\r\n})\r\n\r\nlet zoomScaler = input => {\r\n  let scale1 = d3\r\n    .scaleLinear()\r\n    .domain([20, 5])\r\n    .range([14, 28])\r\n    .clamp(true)\r\n  let scale2 = d3\r\n    .scaleLinear()\r\n    .domain([2, 0.1])\r\n    .range([28, 56])\r\n  if (input >= 5) {\r\n    return scale1(input)\r\n    // return 28\r\n  } else if (input <= 2) {\r\n    // return scale2(input)\r\n    return 28\r\n  } else {\r\n    return 28\r\n  }\r\n}\r\n\r\nclass Projection extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    this.init = this.init.bind(this)\r\n    this.addPoints = this.addPoints.bind(this)\r\n    this.handleResize = this.handleResize.bind(this)\r\n    this.setUpCamera = this.setUpCamera.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\r\n    this.getZFromScale = this.getZFromScale.bind(this)\r\n    this.changeEmbeddings = this.changeEmbeddings.bind(this)\r\n  }\r\n\r\n  changeEmbeddings(prev_choice, new_choice) {\r\n    // assumes mnist embeddings has been updated\r\n    console.log(this.props)\r\n    let {color_array} = this.props\r\n    let ranges = []\r\n    for (let i = 0; i < sprite_number; i++) {\r\n      let start = i * sprite_size\r\n      let end = (i + 1) * sprite_size\r\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\r\n      ranges.push([start, end])\r\n    }\r\n\r\n    console.log(this.props)\r\n    let embedding_chunks = ranges.map(range =>\r\n      this.props[this.props.algorithm_embedding_keys[new_choice]].slice(\r\n        range[0],\r\n        range[1]\r\n      )\r\n    )\r\n\r\n    let label_chunks = ranges.map(range =>\r\n      this.props[this.props.labeling_keys[new_choice]].slice(\r\n          range[0],\r\n          range[1]\r\n      )\r\n    )\r\n    //console.log(this.props.labeling_keys[prev_choice])\r\n    //console.log(this.props.labeling_keys[new_choice])\r\n\r\n    for (let c = 0; c < sprite_number; c++) {\r\n      let echunk = embedding_chunks[c]\r\n      let lchunk = label_chunks[c].map(function(item) {\r\n        // Increment each item by 1\r\n        return item + 1;\r\n      });\r\n      //console.log(lchunk)\r\n\r\n      let points = this.scene.children[0].children[c]\r\n      let numVertices = echunk.length\r\n      let position = points.geometry.attributes.position.array\r\n      let target = new Float32Array(numVertices * 3)\r\n      let new_colors = new Float32Array(numVertices * 3)\r\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\r\n        let x = echunk[i][0]\r\n        let y = echunk[i][1]\r\n        let z = 0\r\n        target[index] = x\r\n        target[index + 1] = y\r\n        target[index + 2] = z\r\n        let color = color_array[lchunk[i]]\r\n        new_colors[index] = color[0] / 255\r\n        new_colors[index + 1] = color[1] / 255\r\n        new_colors[index + 2] = color[2] / 255\r\n      }\r\n\r\n      //console.log(color_array[11])\r\n      // let new_colors = new Float32Array(numVertices * 3)\r\n      // for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\r\n      //   console.log(lchunk[i])\r\n      //   let color = color_array[lchunk[i]]\r\n      //   console.log(color)\r\n      //   new_colors[index] = color[0] / 255\r\n      //   new_colors[index + 1] = color[1] / 255\r\n      //   new_colors[index + 2] = color[2] / 255\r\n      // }\r\n\r\n       // let ver_color = points.geometry.attributes.position.array\r\n       // let tween_color = new TWEEN.Tween(ver_color)\r\n       //    .to(new_colors, c=1000)\r\n       //    .easing(TWEEN.Easing.Linear.None)\r\n       // tween_color.onUpdate(function(){\r\n       //  points.geometry.attributes.color = new THREE.BufferAttribute(\r\n       //      ver_color,\r\n       //      3\r\n       //  )\r\n       //  points.geometry.attributes.color.needsUpdate = true\r\n       // })\r\n\r\n\r\n      let tween_pos = new TWEEN.Tween(position)\r\n        .to(target, 1000)\r\n        .easing(TWEEN.Easing.Linear.None)\r\n      tween_pos.onUpdate(function() {\r\n        points.geometry.attributes.position = new THREE.BufferAttribute(\r\n          position,\r\n          3\r\n        )\r\n        points.geometry.attributes.color = new THREE.BufferAttribute(\r\n            new_colors,\r\n            3\r\n        )\r\n        points.geometry.attributes.color.needsUpdate = true\r\n        points.geometry.attributes.position.needsUpdate = true\r\n      })\r\n\r\n      //tween_color.start()\r\n      tween_pos.start()\r\n    }\r\n  }\r\n\r\n  getZFromScale(scale) {\r\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\r\n    let scale_height = this.props.height / scale\r\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\r\n    return camera_z_position\r\n  }\r\n\r\n  getScaleFromZ(camera_z_position) {\r\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\r\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\r\n    let fov_height = half_fov_height * 2\r\n    let scale = this.props.height / fov_height\r\n    return scale\r\n  }\r\n\r\n  handleResize = (width, height) => {\r\n    this.camera.aspect = width / height\r\n    this.camera.updateProjectionMatrix()\r\n    this.renderer.setSize(width, height)\r\n    let current_scale = this.getScaleFromZ(this.camera.position.z)\r\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2\r\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2\r\n    var resize_transform = d3.zoomIdentity\r\n      .translate(d3_x, d3_y)\r\n      .scale(current_scale)\r\n    let view = d3.select(this.mount)\r\n    this.d3_zoom.transform(view, resize_transform)\r\n  }\r\n\r\n  zoomHandler() {\r\n    let d3_transform = d3.event.transform\r\n\r\n    let scale = d3_transform.k\r\n    let x = -(d3_transform.x - this.props.width / 2) / scale\r\n    let y = (d3_transform.y - this.props.height / 2) / scale\r\n    let z = this.getZFromScale(scale)\r\n\r\n    this.camera.position.set(x, y, z)\r\n\r\n    // point size scales at end of zoom\r\n    let new_size = zoomScaler(z)\r\n    let point_group = this.scene.children[0].children\r\n    for (let c = 0; c < point_group.length; c++) {\r\n      point_group[c].material.uniforms.size.value = new_size/5 // used to be just new_size - make sure they know these are sprites\r\n    }\r\n  }\r\n\r\n  setUpCamera() {\r\n    let { width, height, beta5_embeddings} = this.props\r\n\r\n    let aspect = this.camera.aspect\r\n    let vFOV = this.camera.fov\r\n    let rvFOV = THREE.Math.degToRad(vFOV)\r\n\r\n    let xs = beta5_embeddings.map(e => e[0])\r\n    let min_x = _.min(xs)\r\n    let max_x = _.max(xs)\r\n    let ys = beta5_embeddings.map(e => e[1])\r\n    let min_y = _.min(ys)\r\n    let max_y = _.max(ys)\r\n    let data_width = max_x - min_x\r\n    let data_height = max_y - min_y\r\n    let data_aspect = data_width / data_height\r\n\r\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\r\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\r\n\r\n    let max_center = Math.max(max_x_from_center, max_y_from_center)\r\n\r\n    let camera_z_start\r\n    if (data_aspect > aspect) {\r\n      // console.log(\"width is limiter\");\r\n      // camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\r\n    } else {\r\n      // console.log(\"height is limiter\");\r\n      // camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\r\n    }\r\n\r\n    camera_z_start = max_center / Math.tan(rvFOV / 2)\r\n\r\n    //console.log(camera_z_start)\r\n    let far = camera_z_start * 1.5\r\n    this.camera.far = far\r\n    this.camera.position.z = camera_z_start * 1.1\r\n\r\n    // set up zoom\r\n    this.d3_zoom = d3\r\n      .zoom()\r\n      .scaleExtent([this.getScaleFromZ(3.5*far), this.getScaleFromZ(1.1)])\r\n      .on('zoom', this.zoomHandler.bind(this))\r\n\r\n    let view = d3.select(this.mount)\r\n    this.view = view\r\n    view.call(this.d3_zoom)\r\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\r\n    var initial_transform = d3.zoomIdentity\r\n      .translate(width / (2.5) , height / (1.5))\r\n      .scale(initial_scale)\r\n    this.d3_zoom.transform(view, initial_transform)\r\n  }\r\n\r\n  addPoints() {\r\n    //console.log(this.props)\r\n    let { beta5_embeddings, beta5VAE_labels, city_names, color_array } = this.props\r\n\r\n    // split embeddings and labels into chunks to match sprites\r\n    let ranges = []\r\n    for (let i = 0; i < sprite_number; i++) {\r\n      let start = i * sprite_size\r\n      let end = (i + 1) * sprite_size\r\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\r\n      ranges.push([start, end])\r\n    }\r\n    //console.log(beta5_embeddings)\r\n    let embedding_chunks = ranges.map(range =>\r\n      beta5_embeddings.slice(range[0], range[1])\r\n    )\r\n    let label_chunks = ranges.map(range =>\r\n      beta5VAE_labels.slice(range[0], range[1])\r\n    )\r\n\r\n    //load the textures\r\n    let loader = new THREE.TextureLoader()\r\n    this.textures = mnist_tile_locations.map(l => {\r\n      let t = loader.load(l)\r\n      t.flipY = false\r\n      t.magFilter = THREE.NearestFilter\r\n      // t.minFilter = THREE.LinearMipMapLinearFilter;\r\n      return t\r\n    })\r\n\r\n    //console.log(this.textures[1])\r\n    //console.log(mnist_images[1])\r\n\r\n    let point_group = new THREE.Group()\r\n    for (let c = 0; c < sprite_number; c++) {\r\n      let echunk = embedding_chunks[c]\r\n      let lchunk = label_chunks[c].map(function(item) {\r\n        // Increment each item by 1\r\n        return item + 1;\r\n      });\r\n\r\n      let vertices = []\r\n      for (let v = 0; v < echunk.length; v++) {\r\n        let embedding = echunk[v]\r\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\r\n        vertices[v] = vert\r\n      }\r\n\r\n      let geometry = new THREE.BufferGeometry()\r\n\r\n      let numVertices = vertices.length\r\n      let positions = new Float32Array(numVertices * 3)\r\n      let offsets = new Float32Array(numVertices * 2)\r\n      let colors = new Float32Array(numVertices * 3)\r\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\r\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\r\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\r\n\r\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\r\n        let x = echunk[i][0]\r\n        let y = echunk[i][1]\r\n        let z = 0\r\n        positions[index] = x\r\n        positions[index + 1] = y\r\n        positions[index + 2] = z\r\n        let color = color_array[lchunk[i]]\r\n        colors[index] = color[0] / 255\r\n        colors[index + 1] = color[1] / 255\r\n        colors[index + 2] = color[2] / 255\r\n      }\r\n\r\n      // geometry.attributes.position.copyVector3sArray(vertices)\r\n\r\n      let texture_subsize = 1 / sprite_side\r\n\r\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\r\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\r\n        let y =\r\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\r\n        offsets[index] = x\r\n        offsets[index + 1] = y\r\n      }\r\n\r\n      // for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\r\n      //   //console.log(lchunk)\r\n      //   //console.log(lchunk[i])\r\n      //   //console.log(color_array)\r\n      //   let color = color_array[lchunk[i]]\r\n      //   colors[index] = color[0] / 255\r\n      //   colors[index + 1] = color[1] / 255\r\n      //   colors[index + 2] = color[2] / 255\r\n      // }\r\n\r\n      // uniforms\r\n      let uniforms = {\r\n        texture: { value: this.textures[c] },\r\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\r\n        size: { value: sprite_image_size },\r\n      }\r\n\r\n      let vertex_shader = `\r\n        attribute vec2 offset;\r\n        varying vec2 vOffset;\r\n        attribute vec3 color;\r\n        varying vec3 vColor;\r\n        uniform float size;\r\n        void main() {\r\n          vOffset = offset;\r\n          vColor = color;\r\n          gl_PointSize = size;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        }`\r\n\r\n      let fragment_shader = `\r\n        uniform sampler2D texture;\r\n        uniform vec2 repeat;\r\n        varying vec2 vOffset;\r\n        varying vec3 vColor;\r\n        void main() {\r\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\r\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\r\n          if ( tex.r < 0.5 ) discard;\r\n          tex.r = 1.0;\r\n          tex.g = 1.0;\r\n          tex.b = 1.0;\r\n          gl_FragColor = tex * vec4(vColor, 0.5);\r\n        }`\r\n\r\n\r\n      // material\r\n      let material = new THREE.ShaderMaterial({\r\n        uniforms: uniforms,\r\n        vertexShader: vertex_shader,\r\n        fragmentShader: fragment_shader,\r\n        blending: NormalBlending,\r\n        transparent: true,\r\n        fog: false,\r\n        lights: false,\r\n        depthWrite: false,\r\n        depthTest: false\r\n      })\r\n\r\n      // point cloud\r\n      let point_cloud = new THREE.Points(geometry, material)\r\n      point_cloud.userData = { sprite_index: c }\r\n\r\n      point_group.add(point_cloud)\r\n    }\r\n\r\n    this.scene.add(point_group)\r\n  }\r\n\r\n  addBlankHighlightPoints() {\r\n    console.log(\"blank highlight\")\r\n    let hover_container = new THREE.Group()\r\n    this.scene.add(hover_container)\r\n\r\n    let vert = new THREE.Vector3(0, 0, 0)\r\n    let vertices = [vert]\r\n    let geometry = new THREE.BufferGeometry()\r\n    let numVertices = vertices.length\r\n    var positions = new Float32Array(numVertices * 3) // 3 coordinates per point\r\n    var offsets = new Float32Array(numVertices * 2) // 2 coordinates per point\r\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\r\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\r\n\r\n    // all the attributes will be filled on hover\r\n    let texture_subsize = 1 / sprite_side\r\n\r\n    // uniforms asd\r\n    let uniforms = {\r\n      texture: { value: this.textures[0] },\r\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\r\n      size: { value: 56.0 },\r\n    }\r\n\r\n    let vertex_shader = `\r\n        attribute vec2 offset;\r\n        varying vec2 vOffset;\r\n        uniform float size;\r\n        void main() {\r\n          vOffset = offset;\r\n          gl_PointSize = size;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        }`\r\n\r\n    let fragment_shader = `\r\n        uniform sampler2D texture;\r\n        uniform vec2 repeat;\r\n        varying vec2 vOffset;\r\n        void main() {\r\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\r\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\r\n          tex.a = tex.r;\r\n          tex.r = 0.0;\r\n          tex.g = 0.0;\r\n          tex.b = 0.0;\r\n          //for white\r\n          //tex.r = 1.0;\r\n          //tex.g = 1.0;\r\n          //tex.b = 1.0;\r\n          gl_FragColor = tex;\r\n        }`\r\n\r\n    // material\r\n    var material = new THREE.ShaderMaterial({\r\n      uniforms: uniforms,\r\n      vertexShader: vertex_shader,\r\n      fragmentShader: fragment_shader,\r\n      transparent: true,\r\n    })\r\n\r\n    let point = new THREE.Points(geometry, material)\r\n    point.frustumCulled = false\r\n\r\n    this.scene.children[1].visible = false\r\n    this.scene.children[1].add(point)\r\n    console.log(this.scene.children[1])\r\n  }\r\n\r\n  highlightPoint(sprite_index, digit_index, full_index) {\r\n    //console.log(\"intersected in beggining!\")\r\n    let { algorithm_embedding_keys, labeling_keys, algorithm_choice } = this.props\r\n\r\n    let point = this.scene.children[1].children[0]\r\n\r\n    //console.log(algorithm_embedding_keys)\r\n    //console.log(algorithm_choice)\r\n    let embedding = this.props[algorithm_embedding_keys[algorithm_choice]][\r\n      full_index\r\n    ]\r\n\r\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\r\n    let vertices = [vert]\r\n\r\n    var offsets = new Float32Array(2) // 2 coordinates per point\r\n\r\n    let x = ((digit_index % sprite_side) * sprite_image_size) / sprite_actual_size\r\n    let y = (Math.floor(digit_index / sprite_side) * sprite_image_size) / sprite_actual_size\r\n    offsets[0] = x\r\n    offsets[1] = y\r\n\r\n    point.geometry.attributes.position.copyVector3sArray(vertices)\r\n    point.geometry.attributes.position.needsUpdate = true // required after the first render\r\n    point.geometry.attributes.offset.array = offsets\r\n    point.geometry.attributes.offset.needsUpdate = true // required after the first render\r\n\r\n    // need to set attributes on geometry and uniforms on material\r\n    //console.log(sprite_index)\r\n    //console.log(this.textures[sprite_index])\r\n    point.material.uniforms.texture.value = this.textures[sprite_index]\r\n  }\r\n\r\n  removeHighlights() {\r\n    let highlight_container = this.scene.children[1]\r\n    let highlights = highlight_container.children\r\n    highlight_container.remove(...highlights)\r\n  }\r\n\r\n  checkIntersects(mouse_position) {\r\n    let { width, height, sidebar_ctx, sidebar_image_size } = this.props\r\n\r\n    function mouseToThree([mouseX, mouseY]) {\r\n      return new THREE.Vector3(\r\n        (mouseX / width) * 2 - 1,\r\n        -(mouseY / height) * 2 + 1,\r\n        1\r\n      )\r\n    }\r\n\r\n    function sortIntersectsByDistanceToRay(intersects) {\r\n      return _.sortBy(intersects, 'distanceToRay')\r\n    }\r\n\r\n    let mouse_vector = mouseToThree(mouse_position)\r\n    //console.log(mouse_vector)\r\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\r\n    this.raycaster.params.Points.threshold = 0.25\r\n    //console.log(this.scene.children[0].children.length)\r\n    let intersects = this.raycaster.intersectObjects(\r\n      this.scene.children[0].children\r\n    )\r\n    //console.log(intersects)\r\n    if (intersects[0]) {\r\n      //console.log('Intersected!!')\r\n      //console.log(this.scene.children[0].children)\r\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\r\n      let intersect = sorted_intersects[0]\r\n      let sprite_index = intersect.object.userData.sprite_index\r\n      let digit_index = intersect.index\r\n      let full_index = sprite_index * sprite_size + digit_index\r\n      this.props.setHoverIndex(full_index)\r\n      this.highlightPoint(sprite_index, digit_index, full_index)\r\n      this.scene.children[1].visible = true\r\n\r\n\r\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\r\n      sidebar_ctx.drawImage(\r\n        mnist_images[sprite_index],\r\n        // source rectangle\r\n        (digit_index % sprite_side) * sprite_image_size,\r\n        Math.floor(digit_index / sprite_side) * sprite_image_size,\r\n        sprite_image_size,\r\n        sprite_image_size,\r\n        // destination rectangle\r\n        0,\r\n        0,\r\n        sidebar_image_size,\r\n        sidebar_image_size\r\n      )\r\n    } else {\r\n      this.props.setHoverIndex(null)\r\n      this.scene.children[1].visible = false\r\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\r\n    }\r\n  }\r\n\r\n  handleMouse() {\r\n    let view = d3.select(this.renderer.domElement)\r\n\r\n    this.raycaster = new THREE.Raycaster()\r\n\r\n    view.on('mousemove', () => {\r\n      let [mouseX, mouseY] = d3.mouse(view.node())\r\n      let mouse_position = [mouseX, mouseY]\r\n      this.checkIntersects(mouse_position)\r\n    })\r\n  }\r\n\r\n  init() {\r\n    let { width, height } = this.props\r\n\r\n    this.scene = new THREE.Scene()\r\n\r\n    let vFOV = 75\r\n    let aspect = width / height\r\n    let near = 0.01\r\n    let far = 1000\r\n\r\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\r\n\r\n    this.renderer = new THREE.WebGLRenderer()\r\n    this.renderer.setClearColor('#FFFFFF')\r\n    this.renderer.setSize(width, height)\r\n    this.mount.appendChild(this.renderer.domElement)\r\n\r\n    this.addPoints()\r\n\r\n    this.addBlankHighlightPoints()\r\n\r\n    this.setUpCamera()\r\n\r\n    this.animate()\r\n\r\n    this.handleMouse()\r\n  }\r\n\r\n  animate() {\r\n    requestAnimationFrame(this.animate)\r\n    TWEEN.update()\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.init()\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let { width, height } = this.props\r\n    if (width !== prevProps.width || height !== prevProps.height) {\r\n      this.handleResize(width, height)\r\n    }\r\n    if (prevProps.algorithm_choice !== this.props.algorithm_choice) {\r\n      this.changeEmbeddings(\r\n        prevProps.algorithm_choice,\r\n        this.props.algorithm_choice\r\n      )\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  render() {\r\n    let { width, height } = this.props\r\n    return (\r\n      <div\r\n        style={{ width: width, height: height, overflow: 'hidden' }}\r\n        ref={mount => {\r\n          this.mount = mount\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n//\r\nexport default Projection\r\n","import React, { Component } from 'react'\r\nimport Markdown from 'react-remarkable'\r\nimport { about_text } from './Content'\r\n\r\nclass About extends Component {\r\n  render() {\r\n    let { grem, p } = this.props\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'fixed',\r\n          left: 0,\r\n          top: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          background: '#222',\r\n          color: '#fff',\r\n          paddingTop: grem * 2,\r\n          overflowY: 'auto',\r\n          fontSize: 16,\r\n          lineHeight: 1.5,\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            background: '#333',\r\n            position: 'fixed',\r\n            left: 0,\r\n            top: 0,\r\n            right: 0,\r\n            padding: grem / 2,\r\n          }}\r\n        >\r\n          About\r\n          <button\r\n            onClick={() => {\r\n              this.props.toggleAbout(false)\r\n            }}\r\n            className=\"hover-555\"\r\n            style={{\r\n              position: 'absolute',\r\n              right: 0,\r\n              top: 0,\r\n              height: grem * 2,\r\n              width: grem * 2,\r\n              padding: grem / 2,\r\n              textAlign: 'center',\r\n              cursor: 'pointer',\r\n              textDecoration: 'none',\r\n            }}\r\n          >\r\n            &times;\r\n          </button>\r\n        </div>\r\n        <div\r\n          style={{\r\n            maxWidth: grem * 30,\r\n            margin: '0 auto',\r\n            padding: grem / 2,\r\n            color: '#fff',\r\n          }}\r\n        >\r\n          <Markdown>{about_text}</Markdown>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\r\nimport Sidebar from './Sidebar'\r\nimport Projection from './Projection'\r\nimport About from './About'\r\nimport * as _ from 'lodash'\r\n\r\n// padding constructor\r\nfunction p(tb, lr) {\r\n  return `${tb}px ${lr}px`\r\n}\r\n\r\nlet color_array = [\r\n  [141, 211, 199],\r\n  [255, 255, 179],\r\n  [190, 186, 218],\r\n  [251, 128, 114],\r\n  [128, 177, 211],\r\n  [253, 180, 98],\r\n  [179, 222, 105],\r\n  [252, 205, 229],\r\n  [188, 128, 189],\r\n  [204, 235, 197],\r\n  [215, 135, 188],\r\n  [155, 240, 179],\r\n]\r\n\r\nclass Layout extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      ww: null,\r\n      wh: null,\r\n      sidebar_height: null,\r\n      hover_index: null,\r\n      show_about: null,\r\n      algorithm_choice: 0,\r\n    }\r\n    this.sidebar_ctx = null\r\n    this.setSize = _.debounce(this.setSize.bind(this), 200)\r\n    this.checkHash = this.checkHash.bind(this)\r\n    this.setSidebarCanvas = this.setSidebarCanvas.bind(this)\r\n    this.toggleAbout = this.toggleAbout.bind(this)\r\n    this.selectAlgorithm = this.selectAlgorithm.bind(this)\r\n  }\r\n\r\n  selectAlgorithm(v) {\r\n    let i = this.props.algorithm_options.indexOf(v)\r\n    this.setState({ algorithm_choice: i })\r\n  }\r\n\r\n  setSize() {\r\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\r\n    let sidebar_height = this.sidebar_mount.offsetHeight\r\n    this.setState({ sidebar_height: sidebar_height })\r\n    if (this.sidebar_ctx) this.sidebar_ctx.imageSmoothingEnabled = false\r\n  }\r\n\r\n  setSidebarCanvas(canvas) {\r\n    let ctx = canvas.getContext('2d')\r\n    ctx.imageSmoothingEnabled = false\r\n    this.sidebar_ctx = ctx\r\n  }\r\n\r\n  toggleAbout(state) {\r\n    if (state === true) {\r\n      window.history.pushState(null, 'About UMAP Explorer', '#about')\r\n      this.setState({ show_about: true })\r\n    } else if (state === false) {\r\n      window.history.pushState(null, 'UMAP Explorer', window.location.pathname)\r\n      this.setState({ show_about: false })\r\n    }\r\n  }\r\n\r\n  setHoverIndex(hover_index) {\r\n    this.setState({ hover_index: hover_index })\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setSize()\r\n    this.checkHash()\r\n  }\r\n\r\n  checkHash() {\r\n    if (window.location.hash && window.location.hash === '#about') {\r\n      this.setState({ show_about: true })\r\n    } else {\r\n      this.setState({ show_about: false })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.setSize)\r\n    window.addEventListener('popstate', this.checkHash)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.setSize)\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      beta5_embeddings,\r\n      beta250_embeddings,\r\n      beta1_embeddings,\r\n      joint_embeddings,\r\n      beta5VAE_labels,\r\n      beta250VAE_labels,\r\n      beta1VAE_labels,\r\n      jointVAE_labels,\r\n      city_names,\r\n      algorithm_options,\r\n      algorithm_embedding_keys,\r\n      labeling_keys,\r\n    } = this.props\r\n    let {\r\n      ww,\r\n      wh,\r\n      sidebar_height,\r\n      hover_index,\r\n      show_about,\r\n      algorithm_choice,\r\n    } = this.state\r\n    let sidebar_ctx = this.sidebar_ctx\r\n\r\n    let line_height = 1.5\r\n\r\n    let sidebar_style = {\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n      height: '100vh',\r\n      overflow: 'auto',\r\n      background: '#FFFFFF',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      borderWidth: 1.5,\r\n      borderStyle:'solid',\r\n      borderColor:'coral',\r\n    }\r\n    let main_style = {\r\n      position: 'relative',\r\n      height: '100vh',\r\n      background: '#111',\r\n      overflow: 'hidden',\r\n    }\r\n\r\n    let sidebar_image_size, sidebar_orientation\r\n    let font_size = 16\r\n    if (ww < 800) {\r\n      font_size = 14\r\n      sidebar_style = {\r\n        ...sidebar_style,\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        top: 'auto',\r\n        height: 'auto',\r\n        bottom: 0,\r\n      }\r\n      main_style = { width: ww, height: wh - sidebar_height }\r\n      sidebar_image_size = font_size * line_height * 3\r\n      sidebar_orientation = 'horizontal'\r\n    } else if (ww < 800 + 600) {\r\n      let scaler = 200 + (300 - 200) * ((ww - 800) / 600)\r\n      font_size = 14 + 2 * ((ww - 800) / 600)\r\n      sidebar_style = {\r\n        ...sidebar_style,\r\n        width: scaler,\r\n      }\r\n      sidebar_image_size = sidebar_style.width\r\n      main_style = {\r\n        ...main_style,\r\n        width: ww - scaler,\r\n        left: scaler,\r\n        height: wh,\r\n      }\r\n      sidebar_orientation = 'vertical'\r\n    } else {\r\n      sidebar_style = {\r\n        ...sidebar_style,\r\n        width: 300,\r\n      }\r\n      main_style = {\r\n        ...main_style,\r\n        width: ww - 300,\r\n        left: 300,\r\n        height: wh,\r\n      }\r\n      sidebar_image_size = sidebar_style.width\r\n      sidebar_orientation = 'vertical'\r\n    }\r\n\r\n    let grem = font_size * line_height\r\n\r\n    let general_style = {\r\n      fontSize: font_size,\r\n      lineHeight: line_height,\r\n    }\r\n\r\n    return ww !== null ? (\r\n      <div style={general_style}>\r\n        <div\r\n          style={sidebar_style}\r\n          ref={sidebar_mount => {\r\n            this.sidebar_mount = sidebar_mount\r\n          }}\r\n        >\r\n          <Sidebar\r\n            sidebar_orientation={sidebar_orientation}\r\n            sidebar_image_size={sidebar_image_size}\r\n            grem={grem}\r\n            p={p}\r\n            color_array={color_array}\r\n            setSidebarCanvas={this.setSidebarCanvas}\r\n            hover_index={hover_index}\r\n            beta5VAE_labels={beta5VAE_labels}\r\n            beta250VAE_labels={beta250VAE_labels}\r\n            beta1VAE_labels={beta1VAE_labels}\r\n            jointVAE_labels={jointVAE_labels}\r\n            labeling_keys={labeling_keys}\r\n            city_names = {city_names}\r\n            toggleAbout={this.toggleAbout}\r\n            algorithm_options={algorithm_options}\r\n            algorithm_choice={algorithm_choice}\r\n            selectAlgorithm={this.selectAlgorithm}\r\n          />\r\n        </div>\r\n        <div style={main_style}>\r\n          <Projection\r\n            width={main_style.width}\r\n            height={main_style.height}\r\n            beta5_embeddings={beta5_embeddings}\r\n            beta250_embeddings={beta250_embeddings}\r\n            beta1_embeddings={beta1_embeddings}\r\n            joint_embeddings={joint_embeddings}\r\n            beta5VAE_labels={beta5VAE_labels}\r\n            beta250VAE_labels={beta250VAE_labels}\r\n            beta1VAE_labels={beta1VAE_labels}\r\n            jointVAE_labels={jointVAE_labels}\r\n            city_names = {city_names}\r\n            color_array={color_array}\r\n            sidebar_ctx={sidebar_ctx}\r\n            sidebar_image_size={sidebar_image_size}\r\n            setHoverIndex={this.setHoverIndex.bind(this)}\r\n            algorithm_embedding_keys={algorithm_embedding_keys}\r\n            labeling_keys = {labeling_keys}\r\n            algorithm_choice={algorithm_choice}\r\n          />\r\n        </div>\r\n        {show_about ? (\r\n          <About grem={grem} p={p} toggleAbout={this.toggleAbout} />\r\n        ) : null}\r\n      </div>\r\n    ) : (\r\n      <div style={{ padding: '1rem' }}>Loading layout...</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Layout\r\n","import React, { Component } from 'react'\r\nimport Layout from './Layout'\r\nimport * as _ from 'lodash'\r\nimport * as d3 from 'd3'\r\n\r\nlet algorithm_options = ['Beta VAE - Beta:5', 'Beta VAE - Beta:250', 'VAE - (Beta: 1)', 'JointVAE']\r\nlet algorithm_embedding_keys = [\r\n  'beta5_embeddings',\r\n  'beta250_embeddings',\r\n  'beta1_embeddings',\r\n  'joint_embeddings',\r\n]\r\n\r\nlet labeling_keys = [\r\n    'beta5VAE_labels',\r\n    'beta250VAE_labels',\r\n    'beta1VAE_labels',\r\n    'jointVAE_labels',\r\n]\r\n\r\nclass Data extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      beta5_embeddings: null,\r\n      beta250_embeddings: null,\r\n      beta5VAE_labels: null,\r\n      beta250VAE_labels: null,\r\n      beta1VAE_labels: null,\r\n      city_names: null,\r\n      beta1_embeddings: null,\r\n    }\r\n  }\r\n\r\n  scaleEmbeddings(embeddings) {\r\n    let xs = embeddings.map(e => Math.abs(e[0]))\r\n    let ys = embeddings.map(e => Math.abs(e[1]))\r\n    let max_x = _.max(xs)\r\n    let max_y = _.max(ys)\r\n    let max = Math.max(max_x, max_y)\r\n    let scale = d3\r\n      .scaleLinear()\r\n      .domain([-max, max])\r\n      .range([-20, 20])\r\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\r\n    return scaled_embeddings\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_clusterable_embedings.json`)\r\n      .then(response => response.json())\r\n      .then(beta5_embeddings => {\r\n        let scaled_embeddings = this.scaleEmbeddings(beta5_embeddings)\r\n        console.log('got em')\r\n        this.setState({\r\n          beta5_embeddings: scaled_embeddings,\r\n        })\r\n      })\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_clusterable_embedings_beta250VAE_umap08.json`)\r\n      .then(response => response.json())\r\n      .then(beta250_embeddings => {\r\n        let scaled_embeddings = this.scaleEmbeddings(beta250_embeddings)\r\n        console.log('got em')\r\n        this.setState({\r\n          beta250_embeddings: scaled_embeddings,\r\n        })\r\n      })\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_clusterable_embedings_beta1VAE_umap08.json`)\r\n      .then(response => response.json())\r\n      .then(beta1_embeddings => {\r\n        let scaled_embeddings = this.scaleEmbeddings(beta1_embeddings)\r\n        console.log('got em')\r\n        this.setState({\r\n            beta1_embeddings: scaled_embeddings,\r\n        })\r\n      })\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_clusterable_embedings_JointVAE_umap08.json`)\r\n      .then(response => response.json())\r\n      .then(joint_embeddings => {\r\n        let scaled_embeddings = this.scaleEmbeddings(joint_embeddings)\r\n        console.log('got em')\r\n        this.setState({\r\n            joint_embeddings: scaled_embeddings,\r\n        })\r\n      })\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_hdbscan_LABELS.json`)\r\n      .then(response => response.json())\r\n      .then(beta5VAE_labels =>\r\n        this.setState({\r\n          beta5VAE_labels: beta5VAE_labels,\r\n        })\r\n      )\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_hdbscan_LABELS_beta250VAE_umap08.json`)\r\n       .then(response => response.json())\r\n       .then(beta250VAE_labels =>\r\n         this.setState({\r\n           beta250VAE_labels: beta250VAE_labels,\r\n        })\r\n     )\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_hdbscan_LABELS_beta1VAE_umap08.json`)\r\n       .then(response => response.json())\r\n       .then(beta1VAE_labels =>\r\n         this.setState({\r\n           beta1VAE_labels: beta1VAE_labels,\r\n        })\r\n     )\r\n    fetch(`${process.env.PUBLIC_URL}/min_dist_01_umap_citydataset_hdbscan_LABELS_JointVAE_umap08.json`)\r\n        .then(response => response.json())\r\n        .then(jointVAE_labels =>\r\n          this.setState({\r\n            jointVAE_labels: jointVAE_labels,\r\n        })\r\n     )\r\n    fetch(`${process.env.PUBLIC_URL}/citydataset_pointnames.json`)\r\n       .then(response => response.json())\r\n       .then(city_names =>\r\n         this.setState({\r\n           city_names: city_names,\r\n         })\r\n      )\r\n  }\r\n\r\n  render() {\r\n    //console.log(this.state)\r\n    return this.state.beta5_embeddings && this.state.beta250_embeddings && this.state.city_names  ? (\r\n      <Layout\r\n        {...this.state}\r\n        algorithm_options={algorithm_options}\r\n        algorithm_embedding_keys={algorithm_embedding_keys}\r\n        labeling_keys = {labeling_keys}\r\n      />\r\n    ) : (\r\n      <div style={{ padding: '1rem' }}>Loading data...</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Data\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport Data from './Data'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <Data />\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}